---
name: CI (Java + Maven + SonarCloud)

on:
  push:
    branches: ["main"]
    paths:
      - "**/*.java"
      - "pom.xml"
      - ".github/workflows/**"
  pull_request:
    branches: ["main"]
  workflow_dispatch: true

  schedule:
    - cron: "10 2 * * *"   # Daily at 02:10

env:
  JAVA_VERSION: "17"
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/sample-java-app
  SERVICE_PORT: 8080

jobs:
  # Job 1: Build & Test with a matrix (parallel JDKs)
  build_test:
    name: Build & Test (JDK ${{ matrix.jdk }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        jdk: ['17', '21']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.jdk }}
          cache: 'maven'

      - name: Build & Test
        run: mvn -B -e -ntp clean verify

  # Job 2: SonarCloud analysis
  sonar:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Analyze with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B -ntp verify sonar:sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  build_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build_test, sonar]     # wait for both to succeed
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Build JAR (skip tests for speed; tests already ran)
        run: mvn -B -ntp -DskipTests package

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,prefix=sha-,format=short

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max


  deploy_smoke:
    name: Pull & Run (Smoke Test)
    runs-on: ubuntu-latest
    needs: [build_push]

    steps:
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine tag to pull
        id: dtag
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Pull image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.dtag.outputs.tag }}

      - name: Run container
        run: |
          docker rm -f sample-java-app || true
          docker run -d --name sample-java-app -p 8080:${{ env.SERVICE_PORT }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.dtag.outputs.tag }}
          echo "Waiting for app to start..."
          sleep 5
          curl -fsS http://localhost:8080/ | tee /tmp/response.json
          grep '"status":"ok"' /tmp/response.json

      - name: Stop container
        if: always()
        run: docker rm -f sample-java-app || true
